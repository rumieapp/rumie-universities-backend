// schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

enum UserType {
  ADMIN
  INSTITUTION
}

type Session {
  token       String
  deviceModel String
  valid       Boolean  @default(true)
  started     DateTime @default(now())
  lastSeen    DateTime @default(now())
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userType  UserType
  userName  String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]

  @@map("users")
}

model PassCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // Institution ID
  passCode  String
  isPassed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("pass_codes")
}

enum CampaignType {
  LISTING
  BANNER
  POPUP
}

enum Tag {
  EVENT
  SPORT
  RESOURCES
}

model Campaign {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  userId              String       @db.ObjectId // Institution ID
  title               String
  url                 String?
  location            String?
  locationCoordinates String?
  type                CampaignType
  tag                 Tag
  campaignImage       String?
  campaignStartAt     String
  campaignEndAt       String
  campaignDuration    Int
  eventDayTime        String
  showOnApp           Boolean      @default(true)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now()) @updatedAt

  @@map("campaigns")
}

model Institution {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  institutionName String
  slug            String    @unique
  passCode        String
  logo            String?
  schoolColor     String?
  sessions        Session[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("institutions")
}

model SupportRequest {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String            @db.ObjectId // Institution ID
  ticketId  String
  email     String
  message   String
  status    SupportStatusType @default(OPEN)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("support_requests")
}

enum SupportStatusType {
  OPEN
  IN_PROGRESS
  CLOSED
}
